#Â Runs cargo [lint, build, test] and generates code coverage stats.
#
# Libtorch is installed manually and its paths are explicitly set in each step.
#
# The `download-libtorch` feature of `rust-bert` is not used to mirror how
# everything is setup in the docker build.
#
name: test-rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Install Protoc
      uses: arduino/setup-protoc@v2

    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - uses: actions/checkout@v3

    - name: install libtorch
      run: |-
        wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.0.1%2Bcpu.zip -O libtorch.zip
        unzip -o libtorch.zip
        sudo /sbin/ldconfig -v
        # Ensures rust binary can discover libtorch.
        echo 'LIBTORCH="/home/runner/work/embed/embed/libtorch"' >> "$GITHUB_ENV"
        echo 'LD_LIBRARY_PATH="/home/runner/work/embed/embed/libtorch/lib:$LD_LIBRARY_PATH"' >> "$GITHUB_ENV"

    - name: Linting
      run: LIBTORCH="${{ env.LIBTORCH }}" LD_LIBRARY_PATH="${{ env.LD_LIBRARY_PATH }}" cargo clippy -- -D warnings

    - name: Build 
      run: LIBTORCH="${{ env.LIBTORCH }}" LD_LIBRARY_PATH="${{ env.LD_LIBRARY_PATH }}" cargo build --verbose

    - name: Run tests
      run: LIBTORCH="${{ env.LIBTORCH }}" LD_LIBRARY_PATH="${{ env.LD_LIBRARY_PATH }}" cargo test --verbose

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate code coverage
      run: LIBTORCH="${{ env.LIBTORCH }}" LD_LIBRARY_PATH="${{ env.LD_LIBRARY_PATH }}" cargo tarpaulin --verbose --workspace


  fmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Enforce formatting
        run: cargo fmt --check
